@using System.Timers
@implements IDisposable

<div class="Search">
    <i class="oi oi-eye"></i>
    <input placeholder="Search...."
           @attributes="AdditionalAttributes" @bind="SearchQuery" @bind:event="oninput" />
    <input type="button" value="Search" @onclick="Search" />
</div>
<hr/>
자식 : @SearchQuery

@code{
    private string searchQuery;
    private Timer debounceTimer;

    public string SearchQuery
    {
        get => searchQuery;
        set { searchQuery = value;
            debounceTimer.Stop();
            debounceTimer.Start();

        }
    }
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    //자식 컴포넌트에서 발생한 정보를 부모 컴포넌트에게 전달

    [Parameter]
    public EventCallback<string> SearchQureyChanged {get;set;}

    [Parameter]
    public int Debounce { get; set; } = 300;

    protected override void OnInitialized()
    {
        debounceTimer = new Timer();
        debounceTimer.Interval = Debounce;
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += SearchHandeler;

    }


    protected void Search()
    {
        SearchQureyChanged.InvokeAsync(SearchQuery);
        // 부모의 메서드에 검색어를 전달해줄수 있다
    }
    protected async void SearchHandeler(object source, ElapsedEventArgs e)
    {
        await InvokeAsync(() => SearchQureyChanged.InvokeAsync(SearchQuery));
        // 부모의 메서드에 검색어를 전달해줄수 있다
    }

    public void Dispose()
    {
        debounceTimer.Dispose();
    }
}
